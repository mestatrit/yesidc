<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

<!-- 
定义activemq的connetctionFactory，可定义对PERSISTENT的消息进行异步发送(PERSISTENT消息默认同步发送，
而NON_PERSISTENT消息默认异步发送)，可定义ClientID(Durable为true时，订阅者的必须设置)。
定义Spring的CachingConnectionFactory，定义Cache 10个Session.

   消息发送者
定义JMSTemplate，定义NON_PERSISTENT，优先级为9.
发送者实现MessageCreator类，在发送MapMessage同时设置了一个便于接收者用Selector过滤的Property.

   消息消费者
Queue的Listener定义了concurrentConsumers与maxConcurrentConsumers，初始化5个，可动态扩展到10个用户。
Topic的Listener定义了自己为持久化用户。定义了一个消息过滤条件（只接收Property中type为user的消息。
确认模式改为Client模式，如果出现异常或应用被异常关闭，在Connection关闭后，
Broker将会把消息转发给另一个消费者。(如果另一个消费者也不能消费，则在此消费者关闭后继续发给下一个消费者，
永远循环下去。
而如果设置为transacted=true模式，ActiveMQ会把消息重发6次给同一个消费者--在RedeliverPolicy中设置，
如果此消费者已完蛋，则发送给其他消费者。超过6次后，把消息放入Dead Letter Queue。
感觉使用Client模式较为简单。
-->

<!-- 
<一>表说明: 
当在启动ActiveMQ时,先判断表是否存在,如果不存在,将去创建表,如下: 
(1)ACTIVEMQ_ACKS:持久订阅者列表 
1.CONTAINER:类型://主题 
如:topic://basicInfo.topic 
2.SUB_DEST:应该是描述,与1内容相同 
3.CLIENT_ID:持久订阅者的标志ID,必须唯一 
4.SUB_NAME:持久订阅者的名称.(durableSubscriptionName) 
5.SELECTOR:消息选择器,consumer可以选择自己想要的 
6.LAST_ACKED_ID:最后一次确认ID,这个字段存的该该订阅者最后一次收到的消息的ID 

(2)ACTIVEMQ_LOCK:进行数据访问的排斥锁 
1.ID:值为1 
2.TIME:时间 
3.BROKER_NAME:broker的名称 
   这个表似为集群使用,但现在ActiveMQ并不能共享数据库. 

(3)ACTIVEMQ_MSGS:存储Queue和Topic消息的表 
1.ID:消息的ID 
2.CONTAINER: 类型://主题 
如:queue://my.queue 
Topic://basicInfo.topic 
3.MSGID_PROD:发送消息者的标志 
MSGID_PROD =ID:[computerName][…..] 
注意computerName,不要使用中文,消息对象中会存储这个部分,解析connectID时会出现Bad String错误. 
4.MSGID_SEQ:还不知用处 
5.EXPIRATION:到期时间. 
6.MSG:消息本身,Blob类型. 
可以在JmsTemplate发送配置中,加上<property name=”timeToLive” value=”432000000”/>,5天的生命期,如果消息一直没有被处理,消息会被删除,但是表中会存在CONTAINER为queue://ActiveMQ.DLQ的记录.也就是说,相当于将过期的消息发给了一个ActiveMQ自定义的删除队列.. 

<二>关于ActiveMQ的持久订阅消息删除操作 
1.主题消息只有一条,所有订阅了这个消息的持久订阅者都要收到消息,只有所有订阅者收到消息并确认
(Acknowledge)之后.才会删除. 说明:ActiveMQ支持批量(optimizeAcknowledge为true)确认,以提高性能 
2.ActiveMQ执行删除Topic消息的cleanup()操作的时间间隔为5 minutes.. 
 -->
	<description>JMS高级应用配置(NON_PERSISTENT,DURIABLE,SELECTOR)</description>

	<!-- ActiveMQ 连接工厂 -->
	<bean id="advancedConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${jms.broker_url}" />
		<!-- 对PERSISTENT的消息进行异步发送(NON_PERSISTENT消息默认异步发送) -->
		<!-- <property name="useAsyncSend" value="true" /> -->
	</bean>

	<!-- 持久化主题订阅者ActiveMQ 连接工厂 -->
	<bean id="advancedTopicConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${jms.broker_url}" />
		<!-- Durable订阅者必须设置ClientId -->
		<property name="clientID" value="${jms.clicentId}" />
	</bean>

	<!-- Spring Caching 连接工厂 -->
	<bean id="advancedCachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="advancedConnectionFactory" />
		<property name="sessionCacheSize" value="10" />
	</bean>

	<!-- Queue定义 -->
	<bean id="advancedNotifyQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="q.advanced.notify" />
	</bean>

	<!-- Topic定义 -->
	<bean id="advancedNotifyTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg value="t.advanced.notify" />
	</bean>

	<!-- Spring JMS Template -->
	<bean id="advancedJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="advancedCachingConnectionFactory" />
		<!-- 使 deliveryMode, priority, timeToLive设置生效-->
		<property name="explicitQosEnabled" value="true" />
		<!-- 设置NON_PERSISTENT模式, 默认为PERSISTENT -->
		<property name="deliveryPersistent" value="false" />
		<!-- 设置优先级, 默认为4 -->
		<property name="priority" value="9" />
	</bean>

	<!-- 使用Spring JmsTemplate的消息生产者 -->
	<bean id="advancedNotifyMessageProducer" class="org.springside.examples.showcase.jms.advanced.AdvancedNotifyMessageProducer">
		<property name="jmsTemplate" ref="advancedJmsTemplate" />
		<property name="notifyQueue" ref="advancedNotifyQueue" />
		<property name="notifyTopic" ref="advancedNotifyTopic" />
	</bean>

	<!-- 异步接收Queue消息Container -->
	<bean id="advancedQueueContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="advancedConnectionFactory" />
		<property name="destination" ref="advancedNotifyQueue" />
		<property name="messageListener" ref="advancedNotifyMessageListener" />
		<!-- 初始5个Consumer, 可动态扩展到10 -->
		<property name="concurrentConsumers" value="5" />
		<property name="maxConcurrentConsumers" value="10" />
		<!-- 设置消息确认模式为Client -->
		<property name="sessionAcknowledgeModeName" value="CLIENT_ACKNOWLEDGE" />
	</bean>

	<!-- 异步接收Topic消息Container -->
	<bean id="advancedTopicContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="advancedTopicConnectionFactory" />
		<property name="destination" ref="advancedNotifyTopic" />
		<property name="messageListener" ref="advancedNotifyMessageListener" />
		<!-- JMS Selector消息过滤器 -->
		<property name="messageSelector" value="objectType='user'" />
		<!-- 持久化订阅者 -->
		<property name="subscriptionDurable" value="true" />
	</bean>

	<!-- 异步接收消息处理类 -->
	<bean id="advancedNotifyMessageListener" class="org.springside.examples.showcase.jms.advanced.AdvancedNotifyMessageListener" />
</beans>